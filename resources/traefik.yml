# Extends ../docker-compose.yml
# Use with
#  docker-compose -f docker-compose.yml -f resources/traefik.yml up -d

services:
  traefik:
    image: traefik:v2.3
    container_name: traefik
    command:
      - --api.insecure=true
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      # Enable Let's Encrypt
      - --certificatesresolvers.acmeresolver.acme.email=acme@crafteo.io
      - --certificatesresolvers.acmeresolver.acme.httpchallenge.entrypoint=web
      - --certificatesresolvers.acmeresolver.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory
      # - --log.level=DEBUG # Enable debug logs 
    
    #
    # Container use non standard port for demo (8080 and 4443 instead fof 80 and 443)
    # as port 80 and 443 are already used by system component (eg. Caddy server).
    # Real Production deployment should use 80 and 443. 
    #
    # Note for ACME HTTP challenge: port 80 is REQUIRED for ACME challenge to work.
    # Under the hood our sandbox environment redirect external port 80 to localhost 8080
    # Allowing ACME challenge to go through as    ACME -> *:80 -> localhost:8080 -> Traefik
    # Instead of straightforward                  ACME -> *:80 Traefik
    # But result is the same :)
    #
    ports:
      - "8080:80"
      - "4443:443"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"

  vote:
    labels:
        - "traefik.enable=true"
        - "traefik.http.routers.vote.rule=Host(`${VOTE_URL}`)"
        - "traefik.http.routers.vote.entrypoints=websecure"
        - "traefik.http.routers.vote.tls=true"
        - "traefik.http.routers.vote.tls.certresolver=acmeresolver"
        - "traefik.http.services.vote.loadbalancer.server.port=80"

  result:
    labels:
        - "traefik.enable=true"
        - "traefik.http.routers.result.rule=Host(`${RESULT_URL}`)"
        - "traefik.http.routers.result.entrypoints=websecure"
        - "traefik.http.routers.result.tls=true"
        - "traefik.http.routers.result.tls.certresolver=acmeresolver"
        - "traefik.http.services.result.loadbalancer.server.port=80"